//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : DoorMachine.sm
//

#ifndef DOORMACHINE_SM_H
#define DOORMACHINE_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"
#include <QByteArray>



// Forward declarations.
class MainMap;
class MainMap_WaitingForFaceDetection;
class MainMap_WaitingForApproval;
class MainMap_Alarm;
class MainMap_Unlocked;
class MainMap_Default;
class DoorState;
class DoorMachineContext;
class Door;

class DoorState :
    public statemap::State
{
public:

    DoorState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(DoorMachineContext&) {};
    virtual void Exit(DoorMachineContext&) {};

    virtual void Approval(DoorMachineContext& context, const bool isApproved);
    virtual void ApprovalTimeOut(DoorMachineContext& context);
    virtual void FaceDetected(DoorMachineContext& context, const QByteArray& image);
    virtual void Reset(DoorMachineContext& context);
    virtual void UnlockedTimerTimeOut(DoorMachineContext& context);

protected:

    virtual void Default(DoorMachineContext& context);
};

class MainMap
{
public:

    static MainMap_WaitingForFaceDetection WaitingForFaceDetection;
    static MainMap_WaitingForApproval WaitingForApproval;
    static MainMap_Alarm Alarm;
    static MainMap_Unlocked Unlocked;
};

class MainMap_Default :
    public DoorState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : DoorState(name, stateId)
    {};

};

class MainMap_WaitingForFaceDetection :
    public MainMap_Default
{
public:
    MainMap_WaitingForFaceDetection(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Entry(DoorMachineContext&);
    virtual void FaceDetected(DoorMachineContext& context, const QByteArray& image);
};

class MainMap_WaitingForApproval :
    public MainMap_Default
{
public:
    MainMap_WaitingForApproval(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Entry(DoorMachineContext&);
    virtual void Exit(DoorMachineContext&);
    virtual void Approval(DoorMachineContext& context, const bool isApproved);
    virtual void ApprovalTimeOut(DoorMachineContext& context);
};

class MainMap_Alarm :
    public MainMap_Default
{
public:
    MainMap_Alarm(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Reset(DoorMachineContext& context);
};

class MainMap_Unlocked :
    public MainMap_Default
{
public:
    MainMap_Unlocked(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Entry(DoorMachineContext&);
    virtual void Exit(DoorMachineContext&);
    virtual void UnlockedTimerTimeOut(DoorMachineContext& context);
};

class DoorMachineContext :
    public statemap::FSMContext
{
public:

    explicit DoorMachineContext(Door& owner)
    : FSMContext(MainMap::WaitingForFaceDetection),
      _owner(owner)
    {};

    DoorMachineContext(Door& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline Door& getOwner()
    {
        return (_owner);
    };

    inline DoorState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<DoorState&>(*_state);
    };

    inline void Approval(const bool isApproved)
    {
        getState().Approval(*this, isApproved);
    };

    inline void ApprovalTimeOut()
    {
        getState().ApprovalTimeOut(*this);
    };

    inline void FaceDetected(const QByteArray& image)
    {
        getState().FaceDetected(*this, image);
    };

    inline void Reset()
    {
        getState().Reset(*this);
    };

    inline void UnlockedTimerTimeOut()
    {
        getState().UnlockedTimerTimeOut(*this);
    };

private:
    Door& _owner;
};


#endif // DOORMACHINE_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
